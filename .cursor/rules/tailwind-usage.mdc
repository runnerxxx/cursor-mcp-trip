---
description: 
globs: 
alwaysApply: false
---
# Tailwind CSS 使用规范

## 概述

得间H5项目使用定制化的Tailwind CSS配置，提供了一套完整的设计系统，包括颜色、字体、间距、组件等。项目配置文件位于：
- [tailwind.config.js](mdc:sudu-h5/tailwind.config.js) - 主配置文件
- [tailwind/dejianConf.js](mdc:sudu-h5/tailwind/dejianConf.js) - 得间主题配置

## 1. 颜色系统

项目使用一套结构化的颜色变量系统，采用功能语义化命名，确保整个应用的颜色一致性。

### 1.1 主题色

使用`suduTheme`作为主题色系列，包含不同透明度变体：

```vue
<!-- 主题色 100% 透明度 -->
<div class="bg-suduTheme-op-100"></div> <!-- rgba(252, 66, 44, 1) -->

<!-- 主题色 10% 透明度 -->
<div class="bg-suduTheme-op-10"></div> <!-- rgba(252, 66, 44, 0.1) -->
```

### 1.2 中性色

使用`main`系列表示中性色，适用于文本、边框等元素：

```vue
<!-- 主文本颜色 -->
<p class="text-main-op-100"></p> <!-- rgba(34, 34, 34, 1) -->

<!-- 次要文本颜色 -->
<p class="text-main-op-75"></p> <!-- rgba(51, 51, 51, 0.75) -->

<!-- 辅助文本颜色 -->
<p class="text-main-op-50"></p> <!-- rgba(51, 51, 51, 0.5) -->
```

### 1.3 功能色

提供多种功能色用于特定场景：

```vue
<!-- 白色 -->
<div class="bg-white-op-100"></div>

<!-- 红色 -->
<div class="bg-red"></div>

<!-- 绿色 -->
<div class="bg-green"></div>

<!-- 橙色 -->
<div class="bg-orange"></div>
```

### 1.4 业务模块特定色

项目为不同业务模块提供专门的颜色变量：

- `wf` - 福利页面颜色
- `rw` - 打赏页面颜色

```vue
<!-- 福利页背景 -->
<div class="bg-wf-warp-bg"></div>

<!-- 打赏页黄色 -->
<div class="bg-rw-ye-100"></div>
```

## 2. 字体系统

项目使用固定的字体大小等级，确保排版一致性。命名规则为`fs-{size}`。

```vue
<!-- 小号文本 12px -->
<p class="text-fs-12"></p>

<!-- 中号文本 16px -->
<p class="text-fs-16"></p>

<!-- 大号文本 24px -->
<p class="text-fs-24"></p>

<!-- 超大号文本 36px -->
<p class="text-fs-36"></p>
```

行高可以单独设置：

```vue
<!-- 1.3倍行高 -->
<p class="leading-one"></p>

<!-- 1.5倍行高 -->
<p class="leading-two"></p>
```

## 3. 间距系统

项目使用4的倍数作为间距系统，提供一致的元素间距。

```vue
<!-- 内边距 -->
<div class="p-4"></div> <!-- 4px -->
<div class="p-8"></div> <!-- 8px -->
<div class="p-16"></div> <!-- 16px -->
<div class="p-24"></div> <!-- 24px -->

<!-- 外边距 -->
<div class="m-4"></div> <!-- 4px -->
<div class="m-8"></div> <!-- 8px -->
<div class="m-16"></div> <!-- 16px -->
<div class="m-24"></div> <!-- 24px -->

<!-- 方向性边距 -->
<div class="pt-8 pb-16 pl-4 pr-4"></div>
<div class="mt-8 mb-16 ml-4 mr-4"></div>
```

## 4. 圆角系统

项目提供四种预设圆角：

```vue
<!-- 小圆角 4px -->
<div class="rounded-sm"></div>

<!-- 中圆角 16px -->
<div class="rounded-md"></div>

<!-- 大圆角 32px -->
<div class="rounded-lg"></div>

<!-- 圆形 50% -->
<div class="rounded-full"></div>
```

## 5. 预设组件类

项目提供了一系列预设的组件类，用于常见UI元素的快速构建。

### 5.1 按钮状态

```vue
<!-- 默认按钮 -->
<button class="wel-button-default"></button>

<!-- 主要按钮 -->
<button class="wel-button-primary"></button>

<!-- 禁用按钮 -->
<button class="wel-button-disabled"></button>
```

### 5.2 福利奖励列表

```vue
<!-- 默认状态 -->
<div class="wel-reward-list-default"></div>

<!-- 激活状态 -->
<div class="wel-reward-list-active"></div>

<!-- 成功状态 -->
<div class="wel-reward-list-success"></div>

<!-- 禁用状态 -->
<div class="wel-reward-list-disabled"></div>
```

### 5.3 小型奖励列表

```vue
<!-- 默认状态 -->
<div class="wel-small-reward-list-default"></div>

<!-- 激活状态 -->
<div class="wel-small-reward-list-active"></div>

<!-- 成功状态 -->
<div class="wel-small-reward-list-success"></div>

<!-- 禁用状态 -->
<div class="wel-small-reward-list-disabled"></div>
```

## 6. 最佳实践

### 6.1 组合原子类

Tailwind 的强大之处在于原子类的组合使用，避免编写自定义CSS：

```vue
<!-- 不推荐 -->
<div class="custom-card"></div>

<!-- 推荐 -->
<div class="bg-white-op-100 rounded-md p-16 shadow-md"></div>
```

### 6.2 响应式设计

使用Tailwind的响应式前缀实现不同屏幕尺寸的样式调整：

```vue
<div class="text-fs-12 md:text-fs-16 lg:text-fs-20"></div>
```

### 6.3 状态变体

使用状态变体控制元素在不同状态下的样式：

```vue
<button class="bg-suduTheme-op-100 hover:bg-suduTheme-op-75 active:bg-suduTheme-op-85"></button>
```

### 6.4 提取组件

对于复杂的、重复使用的UI模式，建议提取为Vue组件而非创建自定义类：

```vue
<!-- 不推荐 -->
<div class="reward-card">...</div>

<!-- 推荐 -->
<RewardCard :data="rewardData" />
```

### 6.5 主题变量扩展

当需要添加新的颜色或组件类时，请在`tailwind/dejianConf.js`中扩展，保持设计系统的一致性：

```javascript
// 在dejianConf.js中添加新的颜色变量
colors: {
  // 现有颜色...
  newFeature: {
    'primary': 'rgba(100, 200, 150, 1)',
    'secondary': 'rgba(100, 200, 150, 0.5)'
  }
}
```

### 6.6 与函数式编程结合

结合Tailwind的类名生成与函数式编程，可以实现更灵活的样式应用：

```vue
<template>
  <div :class="getCardClasses(status)">
    <!-- 内容 -->
  </div>
</template>

<script>
export default {
  methods: {
    // 纯函数，根据状态返回不同的类名组合
    getCardClasses(status) {
      const base = 'p-16 rounded-md';
      
      const statusClasses = {
        default: 'bg-white-op-100 text-main-op-75',
        active: 'bg-suduTheme-op-100 text-white-op-100',
        disabled: 'bg-main-op-10 text-main-op-35'
      };
      
      return `${base} ${statusClasses[status] || statusClasses.default}`;
    }
  }
}
</script>
```

## 7. Tailwind 与 Vue 的集成注意事项

### 7.1 动态类名

在Vue中动态应用Tailwind类：

```vue
<div :class="[
  'p-16 rounded-md',
  isActive ? 'bg-suduTheme-op-100' : 'bg-white-op-100'
]"></div>
```

### 7.2 避免内联样式

优先使用Tailwind类而非内联样式：

```vue
<!-- 不推荐 -->
<div :style="{ backgroundColor: isActive ? '#FC422C' : '#FFFFFF' }"></div>

<!-- 推荐 -->
<div :class="isActive ? 'bg-suduTheme-op-100' : 'bg-white-op-100'"></div>
```

### 7.3 条件类名

使用对象语法应用条件类名：

```vue
<div :class="{
  'p-16': true,
  'bg-suduTheme-op-100': isActive,
  'bg-white-op-100': !isActive,
  'text-fs-16': isLarge,
  'text-fs-12': !isLarge
}"></div>
```

## 8. 定制化与扩展

如需额外的Tailwind配置，请遵循以下流程：

1. 在`tailwind/dejianConf.js`中添加新的颜色、组件类等
2. 必要时在`tailwind.config.js`中扩展配置
3. 确保新添加的类遵循现有的命名规范
4. 在团队内进行设计评审，确保与整体设计系统一致
