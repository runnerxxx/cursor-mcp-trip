---
description: 
globs: 
alwaysApply: false
---
# 状态管理规范

## 状态管理原则

在得间H5项目中，状态管理应遵循以下原则：

1. **单一数据源**：每个状态有唯一的管理源
2. **状态只读**：直接修改状态而是通过纯函数返回新状态
3. **可预测性**：状态变更通过纯函数实现
4. **可追踪性**：每次状态变更可追踪
5. **分层管理**：按业务领域组织状态

## 1. 状态管理模式

### 1.1 OOP封装的状态管理器

```javascript
// src/state/reward-state.js

/**
 * 奖励状态管理器
 * 使用OOP封装状态管理，内部使用FP原则处理数据
 */
export class RewardStateManager {
  constructor() {
    this.state = {
      rewards: [],
      currentPage: 1,
      totalPage: 1,
      loading: false,
      filter: 'all'
    };
    
    this.listeners = new Set();
  }
  
  // 获取当前状态（返回副本确保不可变性）
  getState() {
    return { ...this.state };
  }
  
  // 添加状态变更监听器
  subscribe(listener) {
    this.listeners.add(listener);
    
    // 返回取消订阅的函数
    return () => {
      this.listeners.delete(listener);
    };
  }
  
  // 通知状态变更
  notifyChange() {
    this.listeners.forEach(listener => listener(this.getState()));
  }
  
  // 更新状态（使用纯函数生成新状态）
  updateState(updater) {
    // 使用纯函数更新状态
    this.state = updater(this.state);
    this.notifyChange();
  }
  
  // 业务方法：加载奖励列表
  async loadRewards(page = 1) {
    // 更新加载状态
    this.updateState(state => ({
      ...state,
      loading: true
    }));
    
    try {
      const response = await fetch(`/api/rewards?page=${page}`);
      const data = await response.json();
      
      // 使用纯函数更新状态
      this.updateState(state => ({
        ...state,
        rewards: data.items,
        currentPage: page,
        totalPage: data.totalPage,
        loading: false
      }));
    } catch (error) {
      // 更新错误状态
      this.updateState(state => ({
        ...state,
        loading: false,
        error: error.message
      }));
      
      throw error;
    }
  }
  
  // 业务方法：设置过滤器
  setFilter(filter) {
    this.updateState(state => ({
      ...state,
      filter
    }));
  }
  
  // 业务方法：添加奖励
  addReward(reward) {
    this.updateState(state => ({
      ...state,
      rewards: [...state.rewards, reward]
    }));
  }
  
  // 业务方法：根据条件获取奖励（纯函数）
  getFilteredRewards() {
    const { rewards, filter } = this.state;
    
    if (filter === 'all') {
      return [...rewards];
    }
    
    return rewards.filter(reward => reward.type === filter);
  }
  
  // 单例模式实现
  static instance = null;
  
  static getInstance() {
    if (!RewardStateManager.instance) {
      RewardStateManager.instance = new RewardStateManager();
    }
    
    return RewardStateManager.instance;
  }
}

// 使用示例
const rewardState = RewardStateManager.getInstance();

// 订阅状态变更
const unsubscribe = rewardState.subscribe(state => {
  console.log('State updated:', state);
});

// 加载数据
rewardState.loadRewards();

// 过滤数据
rewardState.setFilter('gold');

// 获取过滤后的数据
const filteredRewards = rewardState.getFilteredRewards();
```

### 1.2 函数式状态管理

使用函数式编程原则实现更高效的状态管理。

```javascript
// src/state/store.js

/**
 * 创建状态容器
 * @param {Object} initialState - 初始状态
 * @returns {Object} 状态容器API
 */
export function createStore(initialState = {}) {
  // 当前状态
  let state = { ...initialState };
  
  // 订阅者列表
  const listeners = new Set();
  
  // 中间件列表
  const middlewares = [];
  
  // 通知状态变更
  function notifyChange() {
    listeners.forEach(listener => listener(state));
  }
  
  // 注册中间件
  function use(middleware) {
    middlewares.push(middleware);
    return () => {
      const index = middlewares.indexOf(middleware);
      if (index !== -1) {
        middlewares.splice(index, 1);
      }
    };
  }
  
  // 创建中间件链
  function applyMiddlewares(action, prevState, nextState) {
    return middlewares.reduce(
      (result, middleware) => middleware(action, prevState, result),
      nextState
    );
  }
  
  // 更新状态
  function dispatch(action) {
    // 保存之前的状态用于中间件
    const prevState = { ...state };
    
    // 使用reducer处理动作
    const nextState = reducer(state, action);
    
    // 应用中间件
    state = applyMiddlewares(action, prevState, nextState);
    
    // 通知状态变更
    notifyChange();
    
    return action;
  }
  
  // 获取当前状态
  function getState() {
    return { ...state };
  }
  
  // 订阅状态变更
  function subscribe(listener) {
    listeners.add(listener);
    
    return () => {
      listeners.delete(listener);
    };
  }
  
  // 默认reducer
  function reducer(state, action) {
    if (typeof action.type !== 'string') {
      return state;
    }
    
    // 默认实现：通过action.type从state中找到对应键进行更新
    const [namespace, method] = action.type.split('/');
    
    if (!namespace || !method || !state[namespace]) {
      return state;
    }
    
    return {
      ...state,
      [namespace]: {
        ...state[namespace],
        ...action.payload
      }
    };
  }
  
  // 替换reducer
  function replaceReducer(newReducer) {
    reducer = newReducer;
  }
  
  // 返回API
  return {
    getState,
    dispatch,
    subscribe,
    replaceReducer,
    use
  };
}

// 使用示例
const store = createStore({
  rewards: {
    items: [],
    loading: false
  },
  user: {
    info: null,
    isLoggedIn: false
  }
});

// 注册日志中间件
store.use((action, prevState, nextState) => {
  console.log('Action:', action);
  console.log('Before:', prevState);
  console.log('After:', nextState);
  return nextState;
});

// 订阅状态变更
store.subscribe(state => {
  console.log('State updated:', state);
});

// 发送动作
store.dispatch({
  type: 'rewards/updateList',
  payload: {
    items: [{ id: 1, name: '金币奖励', amount: 100 }],
    loading: false
  }
});
```

## 2. 组件状态集成

### 2.1 类组件中使用状态管理

```javascript
// src/components/reward-list/index.vue
import { RewardStateManager } from '@/state/reward-state';

export default {
  name: 'RewardList',
  
  data() {
    return {
      rewardState: RewardStateManager.getInstance(),
      localState: {
        selectedId: null
      }
    };
  },
  
  computed: {
    rewards() {
      return this.rewardState.getFilteredRewards();
    },
    
    loading() {
      return this.rewardState.getState().loading;
    }
  },
  
  methods: {
    async loadRewards(page) {
      await this.rewardState.loadRewards(page);
    },
    
    selectReward(id) {
      // 本地组件状态管理
      this.localState.selectedId = id;
    }
  },
  
  mounted() {
    // 订阅状态变更
    this.unsubscribe = this.rewardState.subscribe(state => {
      // 强制组件更新
      this.$forceUpdate();
    });
    
    // 初始加载
    this.loadRewards(1);
  },
  
  beforeDestroy() {
    // 取消订阅
    this.unsubscribe && this.unsubscribe();
  }
};
```

### 2.2 使用组合式API与状态管理

```javascript
// src/features/rewards/use-reward-state.js
import { ref, computed, onMounted, onUnmounted } from '@vue/composition-api';
import { RewardStateManager } from '@/state/reward-state';

/**
 * 奖励状态Hook
 * @returns {Object} 奖励状态和方法
 */
export function useRewardState() {
  // 获取状态管理器
  const rewardState = RewardStateManager.getInstance();
  
  // 创建响应式引用
  const state = ref(rewardState.getState());
  
  // 计算属性
  const rewards = computed(() => rewardState.getFilteredRewards());
  const loading = computed(() => state.value.loading);
  const currentPage = computed(() => state.value.currentPage);
  const totalPage = computed(() => state.value.totalPage);
  
  // 本地状态
  const selectedId = ref(null);
  
  // 方法
  function loadRewards(page) {
    return rewardState.loadRewards(page);
  }
  
  function setFilter(filter) {
    rewardState.setFilter(filter);
  }
  
  function selectReward(id) {
    selectedId.value = id;
  }
  
  // 生命周期管理
  let unsubscribe;
  
  onMounted(() => {
    // 订阅状态变更
    unsubscribe = rewardState.subscribe(newState => {
      state.value = newState;
    });
    
    // 初始加载
    loadRewards(1);
  });
  
  onUnmounted(() => {
    // 取消订阅
    unsubscribe && unsubscribe();
  });
  
  // 返回状态和方法
  return {
    // 状态
    rewards,
    loading,
    currentPage,
    totalPage,
    selectedId,
    
    // 方法
    loadRewards,
    setFilter,
    selectReward
  };
}

// 在组件中使用
export default {
  setup() {
    const { 
      rewards, 
      loading, 
      loadRewards, 
      setFilter 
    } = useRewardState();
    
    return {
      rewards,
      loading,
      loadRewards,
      setFilter
    };
  }
};
```

## 3. 状态管理模式选择

为不同场景选择合适的状态管理方案：

### 3.1 状态分类与管理策略

| 状态类型 | 描述 | 推荐方案 |
|---------|------|---------|
| 组件本地状态 | 仅组件内部使用的UI状态 | Vue的data属性或ref/reactive |
| 共享状态 | 多个组件共享的业务状态 | 状态管理类或函数式存储 |
| 应用全局状态 | 整个应用共享的状态 | 单例模式状态管理器 |
| 持久化状态 | 需要保存到本地的状态 | 封装localStorage的状态管理 |

### 3.2 状态分层架构

```
状态管理分层:

┌─────────────────────────────────┐
│          UI层状态管理           │ ← 组件本地状态
└─────────────────────────────────┘
           ↑           ↓
┌─────────────────────────────────┐
│        业务领域状态管理         │ ← 领域模型状态
└─────────────────────────────────┘
           ↑           ↓
┌─────────────────────────────────┐
│        核心服务状态管理         │ ← 应用全局状态
└─────────────────────────────────┘
           ↑           ↓
┌─────────────────────────────────┐
│        持久化状态管理层         │ ← 持久化状态
└─────────────────────────────────┘
```

## 4. 最佳实践

### 4.1 不可变数据操作

总是使用不可变方式更新数据：

```javascript
// 错误：直接修改对象
state.user.name = 'New Name';

// 正确：创建新对象
state = {
  ...state,
  user: {
    ...state.user,
    name: 'New Name'
  }
};

// 错误：直接修改数组
state.items.push(newItem);

// 正确：创建新数组
state = {
  ...state,
  items: [...state.items, newItem]
};

// 使用工具库
import { produce } from 'immer';

// 使用Immer简化不可变更新
const nextState = produce(state, draft => {
  draft.user.name = 'New Name';
  draft.items.push(newItem);
});
```

### 4.2 状态选择器

使用选择器获取派生状态：

```javascript
// src/state/selectors.js

/**
 * 选择器函数 - 获取奖励总金额
 * @param {Object} state - 应用状态
 * @returns {number} 奖励总金额
 */
export function getTotalRewardAmount(state) {
  return state.rewards.items.reduce((sum, reward) => sum + reward.amount, 0);
}

/**
 * 选择器函数 - 获取高价值奖励
 * @param {Object} state - 应用状态
 * @param {number} threshold - 阈值
 * @returns {Array} 高价值奖励列表
 */
export function getHighValueRewards(state, threshold = 100) {
  return state.rewards.items.filter(reward => reward.amount >= threshold);
}

/**
 * 选择器函数 - 获取用户详情
 * @param {Object} state - 应用状态
 * @returns {Object} 用户详情
 */
export function getUserDetail(state) {
  const { user } = state;
  
  if (!user.info) {
    return null;
  }
  
  // 计算派生数据
  return {
    ...user.info,
    fullName: `${user.info.firstName} ${user.info.lastName}`,
    isVip: Boolean(user.info.vipLevel),
    totalRewards: getTotalRewardAmount(state)
  };
}

// 在组件中使用
const userDetail = getUserDetail(store.getState());
```

### 4.3 状态变更中间件

使用中间件增强状态管理：

```javascript
// src/state/middlewares.js

/**
 * 日志中间件
 * @param {Object} action - 执行的动作
 * @param {Object} prevState - 变更前状态
 * @param {Object} nextState - 变更后状态
 * @returns {Object} 处理后的状态
 */
export function loggerMiddleware(action, prevState, nextState) {
  console.group(`Action: ${action.type}`);
  console.log('Prev State:', prevState);
  console.log('Action:', action);
  console.log('Next State:', nextState);
  console.groupEnd();
  
  return nextState;
}

/**
 * 持久化中间件
 * @param {Object} action - 执行的动作
 * @param {Object} prevState - 变更前状态
 * @param {Object} nextState - 变更后状态
 * @returns {Object} 处理后的状态
 */
export function persistMiddleware(action, prevState, nextState) {
  // 保存到本地存储
  try {
    localStorage.setItem('app_state', JSON.stringify(nextState));
  } catch (e) {
    console.error('Failed to persist state:', e);
  }
  
  return nextState;
}

/**
 * 监控中间件
 * @param {Object} action - 执行的动作
 * @param {Object} prevState - 变更前状态
 * @param {Object} nextState - 变更后状态
 * @returns {Object} 处理后的状态
 */
export function monitorMiddleware(action, prevState, nextState) {
  // 记录性能指标
  const startTime = performance.now();
  
  // 发送监控数据
  setTimeout(() => {
    const duration = performance.now() - startTime;
    
    if (duration > 16) { // 超过一帧的时间
      console.warn(`Slow action: ${action.type}, took ${duration.toFixed(2)}ms`);
    }
  }, 0);
  
  return nextState;
}

// 注册中间件
store.use(loggerMiddleware);
store.use(persistMiddleware);
store.use(monitorMiddleware);
```
